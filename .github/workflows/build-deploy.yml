name: Build and Deploy Better GIMP

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  # =============================================================================
  # BUILD MATRIX JOBS
  # =============================================================================
  
  build-cpp-core:
    name: Build C++ Core
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            preset: linux-release
            artifact: linux-x64
            vcpkg_triplet: x64-linux
          # macOS builds  
          - os: macos-13
            preset: macos-release
            artifact: macos-x64
            vcpkg_triplet: x64-osx
          - os: macos-14
            preset: macos-arm-release
            artifact: macos-arm64
            vcpkg_triplet: arm64-osx
          # Windows builds
          - os: windows-2022
            preset: windows-release
            artifact: windows-x64
            vcpkg_triplet: x64-windows

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Build Environment
        uses: ./.github/actions/setup-build-env
        with:
          platform: ${{ matrix.os }}
          vcpkg_triplet: ${{ matrix.vcpkg_triplet }}

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd core-cpp
          cmake --preset ${{ matrix.preset }} \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cd core-cpp
          cmake --preset ${{ matrix.preset }} `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}

      - name: Build C++ Core
        run: |
          cd core-cpp
          cmake --build --preset ${{ matrix.preset }} --config Release

      - name: Package C++ Artifacts
        run: |
          cd core-cpp
          cmake --build --preset ${{ matrix.preset }} --target package

      - name: Upload C++ Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cpp-core-${{ matrix.artifact }}
          path: |
            core-cpp/build/*/Release/*.dll
            core-cpp/build/*/Release/*.so
            core-cpp/build/*/Release/*.dylib
            core-cpp/build/*/Release/*.a
            core-cpp/build/*/*.pkg
            core-cpp/build/*/*.deb
            core-cpp/build/*/*.rpm
          retention-days: 7

  build-python-backend:
    name: Build Python Backend
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            artifact: linux-x64
          - os: macos-13
            artifact: macos-x64
          - os: macos-14
            artifact: macos-arm64
          - os: windows-2022
            artifact: windows-x64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python Dependencies
        run: |
          cd backend-python
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Build Python Package
        run: |
          cd backend-python
          python -m build --wheel --sdist

      - name: Create Executable (PyInstaller)
        run: |
          cd backend-python
          pip install pyinstaller
          pyinstaller --onefile --name bettergimp-backend src/main.py

      - name: Upload Python Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-backend-${{ matrix.artifact }}
          path: |
            backend-python/dist/
            backend-python/build/
          retention-days: 7

  build-electron-frontend:
    name: Build Electron Frontend
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            artifact: linux-x64
          - os: macos-13
            artifact: macos-x64
          - os: macos-14
            artifact: macos-arm64
          - os: windows-2022
            artifact: windows-x64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend-electron/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend-electron
          npm ci

      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd frontend-electron
          npm run build
          npm run electron:build

      - name: Upload Electron Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-frontend-${{ matrix.artifact }}
          path: |
            frontend-electron/dist/
            frontend-electron/build/
          retention-days: 7

  # =============================================================================
  # PACKAGING AND DISTRIBUTION
  # =============================================================================

  create-release-packages:
    name: Create Release Packages
    needs: [build-cpp-core, build-python-backend, build-electron-frontend]
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Combined Packages
        run: |
          mkdir -p packages/
          
          # Linux package
          mkdir -p packages/linux-x64/
          cp -r artifacts/cpp-core-linux-x64/* packages/linux-x64/
          cp -r artifacts/python-backend-linux-x64/* packages/linux-x64/
          cp -r artifacts/electron-frontend-linux-x64/* packages/linux-x64/
          
          # macOS Intel package
          mkdir -p packages/macos-x64/
          cp -r artifacts/cpp-core-macos-x64/* packages/macos-x64/
          cp -r artifacts/python-backend-macos-x64/* packages/macos-x64/
          cp -r artifacts/electron-frontend-macos-x64/* packages/macos-x64/
          
          # macOS ARM package
          mkdir -p packages/macos-arm64/
          cp -r artifacts/cpp-core-macos-arm64/* packages/macos-arm64/
          cp -r artifacts/python-backend-macos-arm64/* packages/macos-arm64/
          cp -r artifacts/electron-frontend-macos-arm64/* packages/macos-arm64/
          
          # Windows package
          mkdir -p packages/windows-x64/
          cp -r artifacts/cpp-core-windows-x64/* packages/windows-x64/
          cp -r artifacts/python-backend-windows-x64/* packages/windows-x64/
          cp -r artifacts/electron-frontend-windows-x64/* packages/windows-x64/

      - name: Create Archives
        run: |
          cd packages/
          tar -czf ../bettergimp-linux-x64.tar.gz linux-x64/
          tar -czf ../bettergimp-macos-x64.tar.gz macos-x64/
          tar -czf ../bettergimp-macos-arm64.tar.gz macos-arm64/
          zip -r ../bettergimp-windows-x64.zip windows-x64/

      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: |
            bettergimp-*.tar.gz
            bettergimp-*.zip
          retention-days: 30

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================

  deploy-github-release:
    name: Deploy GitHub Release
    needs: [create-release-packages]
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Release Packages
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: ./

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bettergimp-*.tar.gz
            bettergimp-*.zip
          body: |
            ## Better GIMP ${{ github.ref_name }}
            
            ### Downloads
            - **Linux (x64)**: `bettergimp-linux-x64.tar.gz`
            - **macOS (Intel)**: `bettergimp-macos-x64.tar.gz`
            - **macOS (Apple Silicon)**: `bettergimp-macos-arm64.tar.gz`
            - **Windows (x64)**: `bettergimp-windows-x64.zip`
            
            ### Installation
            1. Download the appropriate package for your platform
            2. Extract the archive
            3. Run the installer or executable
            
            ### Changes
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-web-distribution:
    name: Deploy Web Distribution
    needs: [build-electron-frontend]
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: electron-frontend-linux-x64
          path: dist/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: bettergimp.dev

      - name: Deploy to CDN (Production)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Deploying to production CDN..."
          # Add your CDN deployment commands here
          # Example: aws s3 sync dist/ s3://bettergimp-releases/

  notify-deployment:
    name: Notify Deployment
    needs: [deploy-github-release, deploy-web-distribution]
    runs-on: ubuntu-22.04
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')

    steps:
      - name: Notify Discord
        if: success()
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "🚀 Better GIMP Deployment Success",
                "description": "Version ${{ github.ref_name }} has been successfully deployed!",
                "color": 3066993,
                "fields": [
                  {"name": "Version", "value": "${{ github.ref_name }}", "inline": true},
                  {"name": "Commit", "value": "${{ github.sha }}", "inline": true}
                ]
              }]
            }'

      - name: Notify Slack
        if: success()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "✅ Better GIMP ${{ github.ref_name }} deployed successfully!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true}
                ]
              }]
            }'
