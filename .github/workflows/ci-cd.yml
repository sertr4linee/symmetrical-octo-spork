name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  # Build configuration
  BUILD_TYPE: Release
  OPENCV_VERSION: "4.8.1"
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # ====================================
  # LINTING & CODE QUALITY
  # ====================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    # Python linting
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint
        pip install -r backend-python/requirements.txt || true
    
    - name: Python: Black formatting check
      run: black --check backend-python/ || true
    
    - name: Python: isort import sorting
      run: isort --check-only backend-python/ || true
    
    - name: Python: flake8 linting
      run: flake8 backend-python/ || true
    
    - name: Python: mypy type checking
      run: mypy backend-python/ || true
    
    # Frontend linting
    - name: Install frontend dependencies
      run: |
        cd frontend-electron
        npm ci || true
    
    - name: Frontend: ESLint
      run: |
        cd frontend-electron
        npm run lint || true
    
    - name: Frontend: TypeScript check
      run: |
        cd frontend-electron
        npm run type-check || true
    
    # C++ linting
    - name: Install clang-format and clang-tidy
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy
    
    - name: C++: clang-format check
      run: |
        find core-cpp -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | xargs clang-format --dry-run --Werror || true

  # ====================================
  # C++ CORE TESTING
  # ====================================
  test-cpp:
    name: Test C++ Core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.conan2
          build/_deps
        key: cpp-deps-${{ matrix.os }}-${{ hashFiles('core-cpp/conanfile.txt', 'core-cpp/CMakeLists.txt') }}
    
    # Linux setup
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential pkg-config
        sudo apt-get install -y libopencv-dev libtbb-dev libeigen3-dev
        pip install conan
    
    # macOS setup
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake opencv tbb eigen
        pip install conan
    
    # Windows setup
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pip install conan
        choco install cmake
    
    - name: Configure Conan
      run: |
        conan profile detect --force
    
    - name: Install Conan dependencies
      run: |
        cd core-cpp
        conan install . --build=missing || true
    
    - name: Configure CMake
      run: |
        cd core-cpp
        cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                       -DBUILD_TESTING=ON \
                       -DENABLE_SIMD=ON || true
    
    - name: Build C++ Core
      run: |
        cd core-cpp
        cmake --build build --config ${{ env.BUILD_TYPE }} || true
    
    - name: Run C++ Tests
      run: |
        cd core-cpp
        ctest --test-dir build --output-on-failure || true
    
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd core-cpp
        gcov build/CMakeFiles/*.dir/src/*.cpp.gcda || true
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        files: core-cpp/*.gcov
        flags: cpp-core

  # ====================================
  # PYTHON BACKEND TESTING
  # ====================================
  test-python:
    name: Test Python Backend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('backend-python/requirements.txt', 'backend-python/requirements-dev.txt') }}
    
    - name: Install dependencies
      run: |
        cd backend-python
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "requirements.txt not found, skipping"
        pip install -r requirements-dev.txt || echo "requirements-dev.txt not found, skipping"
        pip install pytest pytest-cov pytest-asyncio httpx || true
    
    - name: Setup test database
      run: |
        cd backend-python
        python -c "
        import sqlite3
        conn = sqlite3.connect('test.db')
        conn.execute('''CREATE TABLE IF EXISTS projects (id INTEGER PRIMARY KEY, name TEXT)''')
        conn.close()
        " || true
    
    - name: Run Python tests
      run: |
        cd backend-python
        pytest --cov=. --cov-report=xml --cov-report=html tests/ || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: backend-python/coverage.xml
        flags: python-backend

  # ====================================
  # ELECTRON FRONTEND TESTING
  # ====================================
  test-frontend:
    name: Test Electron Frontend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-electron/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend-electron
        npm ci || true
    
    - name: Run unit tests
      run: |
        cd frontend-electron
        npm test || true
    
    - name: Build frontend
      run: |
        cd frontend-electron
        npm run build || true
    
    # E2E testing with Playwright
    - name: Install Playwright
      run: |
        cd frontend-electron
        npx playwright install || true
    
    - name: Run E2E tests
      run: |
        cd frontend-electron
        npm run test:e2e || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-results-${{ matrix.os }}
        path: frontend-electron/test-results/

  # ====================================
  # SECURITY SCANNING
  # ====================================
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp, python, javascript
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    # Dependency scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=frontend-electron/package.json || true
    
    - name: Python security check
      run: |
        pip install safety bandit
        cd backend-python
        safety check || true
        bandit -r . || true

  # ====================================
  # BUILD AND PACKAGING
  # ====================================
  build:
    name: Build & Package
    needs: [lint, test-cpp, test-python, test-frontend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
    
    - name: Build C++ Core
      run: |
        cd core-cpp
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_SIMD=ON
        cmake --build build --config Release || true
    
    - name: Build Python Backend
      run: |
        cd backend-python
        pip install build
        python -m build || true
    
    - name: Build Electron App
      run: |
        cd frontend-electron
        npm ci
        npm run build || true
        
    # Package for distribution
    - name: Package Application
      run: |
        cd frontend-electron
        npm run dist || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_LINK: ${{ secrets.CSC_LINK }}  # Code signing certificate
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        APPLEID: ${{ secrets.APPLEID }}
        APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: |
          frontend-electron/dist/*.exe
          frontend-electron/dist/*.dmg
          frontend-electron/dist/*.AppImage
          frontend-electron/dist/*.deb
          frontend-electron/dist/*.rpm
          backend-python/dist/

  # ====================================
  # PERFORMANCE TESTING
  # ====================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup environment
      uses: ./.github/actions/setup-build-env
    
    - name: Run performance benchmarks
      run: |
        cd core-cpp
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_BENCHMARKS=ON
        cmake --build build
        ./build/benchmarks/image_processing_bench || true
    
    - name: Backend performance tests
      run: |
        cd backend-python
        pip install locust
        locust --headless --users 100 --spawn-rate 10 -t 60s -f tests/performance/locustfile.py || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          core-cpp/benchmark_results.json
          backend-python/performance_results/

  # ====================================
  # RELEASE & DEPLOYMENT
  # ====================================
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, performance, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build-ubuntu-latest/**/*
          build-macos-latest/**/*
          build-windows-latest/**/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Update documentation
    - name: Update documentation
      run: |
        # Generate API docs
        cd backend-python
        pip install sphinx sphinx-rtd-theme
        sphinx-build -b html docs/ docs/_build/html/ || true
        
        # Deploy to GitHub Pages
        cd ../
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Push docs to gh-pages branch
        git checkout --orphan gh-pages || git checkout gh-pages
        cp -r backend-python/docs/_build/html/* .
        git add .
        git commit -m "Update documentation for ${{ github.ref_name }}" || exit 0
        git push origin gh-pages || true

  # ====================================
  # MONITORING & NOTIFICATIONS
  # ====================================
  notify:
    name: Notifications
    if: always()
    needs: [release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#betterps-dev'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
