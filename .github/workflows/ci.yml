name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CMAKE_BUILD_TYPE: Release

jobs:
  # C++ Core Engine Build and Test
  cpp-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: windows-latest
            compiler: msvc
          - os: macos-latest
            compiler: clang

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ Environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        sudo apt-get install -y libopencv-dev libsqlite3-dev
        sudo apt-get install -y python3-dev python3-pybind11

    - name: Setup C++ Environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1

    - name: Setup C++ Environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja opencv sqlite python3
        brew install pybind11

    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
          -DBUILD_TESTING=ON

    - name: Build C++ Core
      run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel

    - name: Run C++ Tests
      working-directory: build
      run: ctest --config ${{ env.CMAKE_BUILD_TYPE }} --output-on-failure

    - name: Upload C++ Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cpp-build-${{ matrix.os }}
        path: |
          build/lib*
          build/*.dll
          build/*.so
          build/*.dylib
        retention-days: 7

  # Python API Build and Test
  python-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint Python code
      working-directory: python
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      working-directory: python
      run: mypy api/ --ignore-missing-imports

    - name: Run Python tests
      working-directory: python
      run: |
        pytest tests/ -v --cov=api --cov-report=xml

    - name: Upload Python coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: python/coverage.xml
        flags: python
        name: python-coverage

  # UI Build and Test
  ui-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install UI dependencies
      working-directory: ui
      run: npm ci

    - name: Lint UI code
      working-directory: ui
      run: npm run lint

    - name: Type check UI code
      working-directory: ui
      run: npm run type-check

    - name: Run UI tests
      working-directory: ui
      run: npm run test:coverage

    - name: Build UI
      working-directory: ui
      run: npm run build

    - name: Upload UI build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ui-build
        path: ui/dist/
        retention-days: 7

    - name: Upload UI coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ui/coverage
        flags: ui
        name: ui-coverage

  # Documentation Build
  docs-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python for docs
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 30

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Package and Release (only on main branch)
  package:
    runs-on: ${{ matrix.os }}
    needs: [cpp-build, python-test, ui-test]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Setup packaging environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install packaging dependencies
      working-directory: ui
      run: npm ci

    - name: Build Electron app
      working-directory: ui
      run: npm run build:electron

    - name: Upload release packages
      uses: actions/upload-artifact@v3
      with:
        name: octoedit-${{ matrix.os }}
        path: |
          ui/dist-electron/
        retention-days: 90

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Performance Benchmarks
  performance:
    runs-on: ubuntu-latest
    needs: cpp-build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download C++ artifacts
      uses: actions/download-artifact@v3
      with:
        name: cpp-build-ubuntu-latest

    - name: Run performance benchmarks
      run: |
        # Run performance tests when available
        echo "Performance benchmarks will be implemented"

    - name: Comment PR with results
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Performance benchmarks completed. Results will be available once implemented.'
          });

  # Dependency Updates (scheduled)
  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update Python dependencies
      run: |
        cd python
        pip-compile --upgrade requirements.in

    - name: Update Node.js dependencies
      working-directory: ui
      run: npm update

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated dependency updates'
        body: |
          Automated dependency updates:
          - Python packages updated
          - Node.js packages updated
          
          Please review changes before merging.
        branch: automated/dependency-updates